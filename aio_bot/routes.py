from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from datetime import datetime
from aiogram.filters import Command
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
import pytz
import aiohttp

from config import settings

router = Router()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –¢–ó
ADAK_TZ = pytz.timezone("America/Adak")


class TaskState(StatesGroup):
    message = State()
    tag = State()
    select_date = State()
    select_hour = State()
    select_minute = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(TaskState.message)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ <b>—Ç–µ–∫—Å—Ç</b> –∑–∞–¥–∞—á–∏.")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–∑–æ–≤ —Ç—ç–≥–∞
@router.message(TaskState.message)
async def get_message(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    await state.set_state(TaskState.tag)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—ç–≥–∞ –∏ –≤—ã–∑–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.message(TaskState.tag)
async def get_tag(message: Message, state: FSMContext):
    tag = None if message.text.strip() == "-" else message.text.strip()
    await state.update_data(tag=tag)
    await state.set_state(TaskState.select_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                         reply_markup=await SimpleCalendar(locale="ru_RU.utf8").start_calendar())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–∑ —Å—Ç–∞–¥–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≤—ã–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(SimpleCalendarCallback.filter())
async def process_date(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await state.update_data(date=date)
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=hour_keyboard())
        await state.set_state(TaskState.select_hour)


# —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤
def hour_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=str(h), callback_data=f"hour_{h}") for h in range(i, i + 6)]
        for i in range(0, 24, 6)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤
@router.callback_query(F.data.startswith("hour_"))
async def process_hour(callback: CallbackQuery, state: FSMContext):
    hour = int(callback.data.split("_")[1])
    await state.update_data(hour=hour)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=minute_keyboard())
    await state.set_state(TaskState.select_minute)


# —Ä–∏—Å—É–µ–º –º–∏–Ω—É—Ç—ã
def minute_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(m), callback_data=f"minute_{m}") for m in range(i, i + 5)] for i in
        range(0, 60, 5)
    ])


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω—É—Ç
@router.callback_query(F.data.startswith("minute_"))
async def process_minute(callback: CallbackQuery, state: FSMContext):
    minute = int(callback.data.split("_")[1])
    data = await state.get_data()

    combined = datetime(
        year=data["date"].year,
        month=data["date"].month,
        day=data["date"].day,
        hour=data["hour"],
        minute=minute
    )
    notice_time = ADAK_TZ.localize(combined)
    await state.update_data(notice_time=notice_time)

    await callback.message.edit_text(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {notice_time.strftime('%d.%m.%Y %H:%M')}")

    payload = {
        "user_id": callback.from_user.id,
        "message": data["message_text"],
        "tag": data.get("tag", "–±–µ–∑ —Ç—ç–≥–∞"),
        "notice_time_date": notice_time.isoformat()
    }
    try:
        response_data = await create_task(payload)
        formatted = format_tasks([response_data], many=False)
        await callback.message.answer(formatted)

    except Exception as e:
        print(e)
        await callback.message.answer(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    await state.clear()


# –∑–∞–ø–∏—Å—å —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –¥—Ä—Ñ —Ä—É—á–∫—É –≤ –ø–æ—Å—Ç–≥—Ä–µ—Å
async def create_task(data: dict):
    url = f"http://{settings.django_url}api/tasks/create/"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            result = await response.json()
            return result


@router.message(Command("list"))
async def cmd_list(message: Message):
    response = await get_list_task(message.from_user.id)
    if not response:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á")
        return
    formatted = format_tasks(response)
    await message.answer(formatted)


# –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á
async def get_list_task(user_id):
    url = f"http://{settings.django_url}api/tasks/{user_id}/"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            result = await response.json()
            return result


def format_tasks(tasks, many=True) -> str:
    time_format = lambda x: datetime.fromisoformat(x).strftime('%d.%m.%Y %H:%M')
    formatted = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:</b>\n\n"
    if not many:
        formatted = "üìã <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:</b>\n\n"
    for task in tasks:
        formatted += (
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {task['message']}\n"
            f"üè∑Ô∏è <b>–¢—ç–≥:</b> {task['tag'] or '‚Äî'}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {time_format(task['created_at'])}\n"
            f"‚è∞ <b>–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {time_format(task['notice_time_date'])}\n"
            f"\n"
        )
    return formatted
